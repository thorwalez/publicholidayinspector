<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="LastDayValidator.php" path="/Validator">
    <totals>
      <lines total="133" comments="60" code="73" executable="29" executed="29" percent="100.00"/>
      <methods count="5" tested="5" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="PublicHolidayInspector\Validator\LastDayValidator" start="25" executable="29" executed="29" crap="12">
      <package full="PublicHolidayInspector" name="PublicHolidayInspector" sub="" category=""/>
      <namespace name="PublicHolidayInspector\Validator"/>
      <method name="__construct" signature="__construct(PublicHolidayCalculatorServiceInterface $publicHolidayService, DateService $dateService)" start="48" end="52" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="isValid" signature="isValid($dateTime, string $state = '', string $country = 'de')" start="65" end="94" crap="7" executable="20" executed="20" coverage="100"/>
      <method name="isWorkingDay" signature="isWorkingDay(\DateTime $dateTime, $state, $country): bool" start="102" end="107" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="isBreakPoint" signature="isBreakPoint(\DateTime $dateTime, $state, $country): bool" start="113" end="118" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="getMessages" signature="getMessages()" start="129" end="132" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="50">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="51">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="52">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="67">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="68">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="69">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="70">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
      </line>
      <line nr="71">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
      </line>
      <line nr="73">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="74">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="75">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="76">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="77">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="78">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="79">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="81">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="82">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="83">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="84">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="87">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="88">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="92">
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
      </line>
      <line nr="93">
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
      </line>
      <line nr="104">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="105">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testNoUltimoDayFromDecemberForAustria"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="115">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="116">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="117">
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="131">
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Copyright (c) 2018.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * Created By</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> * @author Mike Hartl</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * @copyright 2018  Mike Hartl All rights reserved</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * @license  The source code of this document is proprietary work, and is not licensed for distribution or use.</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * @created 13.06.18</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * @version 0.0.1</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Validator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Interfaces</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DefaultConstantsInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Service</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DateService</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Service</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">PublicHolidayCalculatorServiceInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Zend</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Validator</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20"/>
      <line no="21">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT"> * Class LastDayValidator</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT"> * @package PublicHolidayInspector\Validator</token>
      </line>
      <line no="24">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="25">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LastDayValidator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DayValidatorInterface</token>
      </line>
      <line no="26">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT">     * @var PublicHolidayCalculatorServiceInterface</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$publicHolidayService</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31"/>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="33">
        <token name="T_DOC_COMMENT">     * @var DateService</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateService</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36"/>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$messages</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT">     * LastDayValidator constructor.</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     * @param PublicHolidayCalculatorServiceInterface $publicHolidayService</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     * @param DateService                             $dateService</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PublicHolidayCalculatorServiceInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$publicHolidayService</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DateService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateService</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">publicHolidayService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$publicHolidayService</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dateService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateService</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     * Returns true if and only if $value meets the validation requirements</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * If $value fails validation, then this method returns false, and</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     * getMessages() will return an array of messages that explain why the</token>
      </line>
      <line no="58">
        <token name="T_DOC_COMMENT">     * validation failed.</token>
      </line>
      <line no="59">
        <token name="T_DOC_COMMENT">     * @param \DateTime $dateTime</token>
      </line>
      <line no="60">
        <token name="T_DOC_COMMENT">     * @param string    $state</token>
      </line>
      <line no="61">
        <token name="T_DOC_COMMENT">     * @param string    $country</token>
      </line>
      <line no="62">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="63">
        <token name="T_DOC_COMMENT">     * @throws \Exception</token>
      </line>
      <line no="64">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isValid</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'de'</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isWorkingDay</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$diffLastDayFromDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dateService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">diffToLastDayOfMonth</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLONE">clone</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$diffLastDayFromDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">messages</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'The day is the final from month.'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$tomorrowDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLONE">clone</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$breakpoint</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">                </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$breakpoint</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dateService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tomorrow</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tomorrowDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isWorkingDay</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tomorrowDate</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$breakpoint</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$diffResult</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dateService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">diffToLastDayOfMonth</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tomorrowDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$breakpoint</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isBreakPoint</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tomorrowDate</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$diffResult</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$breakpoint</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">messages</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'The day is the final from month.'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$breakpoint</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="91"/>
      <line no="92">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">messages</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'The day is not final from month.'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="95"/>
      <line no="96">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="97">
        <token name="T_DOC_COMMENT">     * @param \DateTime $dateTime</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * @param           $state</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     * @param           $country</token>
      </line>
      <line no="100">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isWorkingDay</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DateTime</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">publicHolidayService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">calculate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DefaultConstantsInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_OUTPUT_WORKDAY</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="106"/>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="108"/>
      <line no="109">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="110">
        <token name="T_DOC_COMMENT">     * @param \DateTime $dateTime</token>
      </line>
      <line no="111">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="112">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isBreakPoint</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DateTime</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dateService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isLastDayOfMonth</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">publicHolidayService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">calculate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$dateTime</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$state</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$country</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">DefaultConstantsInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_OUTPUT_WORKDAY</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="119"/>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="121">
        <token name="T_DOC_COMMENT">     * Returns an array of messages that explain why the most recent isValid()</token>
      </line>
      <line no="122">
        <token name="T_DOC_COMMENT">     * call returned false. The array keys are validation failure message identifiers,</token>
      </line>
      <line no="123">
        <token name="T_DOC_COMMENT">     * and the array values are the corresponding human-readable message strings.</token>
      </line>
      <line no="124">
        <token name="T_DOC_COMMENT">     * If isValid() was never called or if the most recent isValid() call</token>
      </line>
      <line no="125">
        <token name="T_DOC_COMMENT">     * returned true, then this method returns an empty array.</token>
      </line>
      <line no="126">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="127">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="128">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getMessages</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">messages</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="133">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
    </source>
  </file>
</phpunit>
