<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="DayOfPrayerAndRepentance.php" path="/Day">
    <totals>
      <lines total="62" comments="23" code="39" executable="12" executed="12" percent="100.00"/>
      <methods count="2" tested="2" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="PublicHolidayInspector\Day\DayOfPrayerAndRepentance" start="22" executable="12" executed="12" crap="2">
      <package full="PublicHolidayInspector" name="PublicHolidayInspector" sub="" category=""/>
      <namespace name="PublicHolidayInspector\Day"/>
      <method name="equals" signature="equals($changeDate)" start="37" end="40" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getDayOfPrayerAndRepentance" signature="getDayOfPrayerAndRepentance(int $year)" start="46" end="62" crap="1" executable="11" executed="11" coverage="100"/>
    </class>
    <coverage>
      <line nr="39">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="48">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="49">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="50">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="51">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="52">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="53">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="54">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="55">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="56">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="57">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="58">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Copyright (c) 2019.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * Created By</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> * @author Mike Hartl</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * @copyright 2019  Mike Hartl All rights reserved</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * @license  The source code of this document is proprietary work, and is not licensed for distribution or use.</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * @created 25.12.2019</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * @version 0.0.1</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Day</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Interfaces</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">De</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">PublicHolidaysConstantsInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT"> * Class DayOfPrayerAndRepentance</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT"> * @package PublicHolidayInspector\Day</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="22">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DayOfPrayerAndRepentance</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXTENDS">extends</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">EasterSunday</token>
      </line>
      <line no="23">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DAY_MONTH_FORMAT</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'d.m'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DAY_NAME</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidaysConstantsInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">PUBLIC_HOLIDAY_NAME_DAY_OF_PRAYER_AND_REPENTANCE</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26"/>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DEFAULT_DAY</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">23</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28"/>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DEFAULT_MONTH</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">11</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LAST_WEDNESDAY</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"last Wednesday"</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * @param string $changeDate</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">equals</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$changeDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$changeDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDayOfPrayerAndRepentance</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">easterYear</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT">     * @param int $year</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getDayOfPrayerAndRepentance</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$year</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">date</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DAY_MONTH_FORMAT</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">strtotime</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LAST_WEDNESDAY</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">                </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">mktime</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_HOUR</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_MINUTE</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_SECOND</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_MONTH</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_DAY</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$year</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
    </source>
  </file>
</phpunit>
