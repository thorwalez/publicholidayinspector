<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="GermanPublicHolidayCalculatorService.php" path="/Service/Strategy">
    <totals>
      <lines total="100" comments="33" code="67" executable="26" executed="26" percent="100.00"/>
      <methods count="3" tested="3" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorService" start="24" executable="26" executed="26" crap="9">
      <package full="PublicHolidayInspector" name="PublicHolidayInspector" sub="" category=""/>
      <namespace name="PublicHolidayInspector\Service\Strategy"/>
      <method name="calculate" signature="calculate(\DateTime $date = null, string $germanState = '') : string" start="32" end="61" crap="5" executable="15" executed="15" coverage="100"/>
      <method name="calculateDynamicHolidays" signature="calculateDynamicHolidays(\DateTime $date, string $changeDate, string $germanState = '')" start="70" end="81" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="federalState" signature="federalState(Holiday $day, string $federalState)" start="89" end="99" crap="3" executable="7" executed="7" coverage="100"/>
    </class>
    <coverage>
      <line nr="35">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="36">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="37">
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
      </line>
      <line nr="40">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="41">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="42">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="44">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="45">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="48">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="49">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="50">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
      </line>
      <line nr="53">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="56">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="57">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="58">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="72">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="75">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testDateIsNull"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryNoLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testUltimoFebruaryLeapYear"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testTwoDaysForLastDayOfMonth"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsNotWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testNotTheLastDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testSpecialCases"/>
      </line>
      <line nr="77">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="79">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="92">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="93">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="94">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="95">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="96">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
      <line nr="97">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithOutGermanState"/>
      </line>
      <line nr="99">
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testInvokeCreater"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testFixPublicHolidayDoGU"/>
        <covered by="Test\PublicHolidayInspector\Service\PublicHolidayCalculatorServiceTest::testDynamicPublicHolidayDoPaRWithGermanState"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorGoodFriday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorEasterMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitSunday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorWhitMonday"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorAscensionDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorCorpusChristi"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testNewHolidyCalculatorLaborDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorChristmasEve"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYear"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorThreeHolyKings"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorMaryAscension"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfGermanUnity"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorReformationDayOrHalloween"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorAllSaintsDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorDayOfPrayerAndRepentance"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorFirstChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorSecondChristmansDay"/>
        <covered by="Test\PublicHolidayInspector\Service\Strategy\GermanPublicHolidayCalculatorServiceTest::testCalculatorNewYearsEve"/>
        <covered by="Test\PublicHolidayInspector\Service\UltimoDayCalculatorServiceTest::testThreeDaysForLastDayOfMonthThrowsException"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testDayIsWorkingDay"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonth"/>
        <covered by="Test\PublicHolidayInspector\Validator\LastDayValidatorTest::testFindTheLastValidDayFromMonthMayAtNRW"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Copyright (c) 2018.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> * Created By</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * @author    Mike Hartl</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> * @copyright 2018  Mike Hartl All rights reserved</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * @license   The source code of this document is proprietary work, and is not licensed for distribution or use.</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * @created   13.06.18</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * @version   0.0.1</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="11"/>
      <line no="12">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Service</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Strategy</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Collection</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">De</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">HolidayCollection</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Day</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Holiday</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Exception</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">NotFoundHolidayException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayInspector</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Interfaces</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">De</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">PublicHolidaysConstantsInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18"/>
      <line no="19"/>
      <line no="20">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT"> * Class GermanPublicHolidayCalculatorService</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT"> * @package PublicHolidayInspector\Service\Strategy</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="24">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">GermanPublicHolidayCalculatorService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXTENDS">extends</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AbstractPublicHolidayCalculatorService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PublicHolidayCalculatorServiceInterface</token>
      </line>
      <line no="25">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     * @param \DateTime|null $date</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT">     * @param string         $germanState</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT">     * @throws \Exception</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">calculate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DateTime</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$germanState</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34"/>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$germanState</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">strtoupper</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$germanState</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DateTime</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NOW'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="39"/>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$year</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$month</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'m'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$day</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'d'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43"/>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$datum_arr</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">getdate</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">            </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">mktime</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Holiday</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_HOUR</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Holiday</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_MINUTE</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Holiday</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_SECOND</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$month</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$day</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$year</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47"/>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_OUTPUT_WORKDAY</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$datum_arr</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'wday'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">WEEK_DAY_SUNDAY</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$datum_arr</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'wday'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">WEEK_DAY_SATURDAY</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEFAULT_OUTPUT_WEEKEND</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="52"/>
      <line no="53">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$changeDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$day</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'.'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$month</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="54"/>
      <line no="55">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">calculateDynamicHolidays</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$changeDate</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$germanState</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">NotFoundHolidayException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ex</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="60"/>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="64">
        <token name="T_DOC_COMMENT">     * @param \DateTime|null $date</token>
      </line>
      <line no="65">
        <token name="T_DOC_COMMENT">     * @param string         $changeDate</token>
      </line>
      <line no="66">
        <token name="T_DOC_COMMENT">     * @param string         $germanState</token>
      </line>
      <line no="67">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="68">
        <token name="T_DOC_COMMENT">     * @throws NotFoundHolidayException</token>
      </line>
      <line no="69">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">calculateDynamicHolidays</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">DateTime</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$changeDate</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$germanState</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$collection</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HolidayCollection</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73"/>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/** @var Holiday $result */</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$collection</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">equal</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$changeDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">federalState</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$germanState</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80"/>
      <line no="81">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="82"/>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="84">
        <token name="T_DOC_COMMENT">     * @param Holiday $day</token>
      </line>
      <line no="85">
        <token name="T_DOC_COMMENT">     * @param string  $federalState</token>
      </line>
      <line no="86">
        <token name="T_DOC_COMMENT">     * @return void</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     * @throws NotFoundHolidayException</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">federalState</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Holiday</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$day</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$federalState</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">            </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PublicHolidaysConstantsInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">PUBLIC_HOLIDAY_GERMAN_STATES</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$day</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$federalState</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">PublicHolidaysConstantsInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">PUBLIC_HOLIDAY_GERMAN_STATES</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$day</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NotFoundHolidayException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Not found a holiday'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="100">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="101"/>
    </source>
  </file>
</phpunit>
